{"version":3,"sources":["pages/auth/RegisterPage/RegisterPage.style.ts","components/Main/RegisterPage/SuccesRegistrationPopup/SuccesRegistrationPopup.styles.ts","components/Main/RegisterPage/SuccesRegistrationPopup/SuccesRegistrationPopup.tsx","pages/auth/RegisterPage/RegisterPage.tsx","components/Sub/FormContainer/FormContainer.styles.ts","components/Sub/FormContainer/FormContainer.tsx","utils/auth-server-error.js"],"names":["useStyles","makeStyles","root","display","flexDirection","alignItems","width","boxSizing","padding","fieldset","input","marginBottom","marginTop","firstInput","title","textAlign","color","button","textTransform","fontSize","lineHeight","link","registerTitle","registerLink","theme","background","palette","default","maxWidth","borderRadius","container","position","dialogContent","paddingTop","justifyContent","popupHeader","margin","fontWeight","popupDescription","fontFamily","popupButton","SuccesRegistrationPopup","open","handleClose","classes","navigate","useNavigate","Dialog","paper","onClose","className","DialogContent","Typography","component","variant","PROJECT_NAME","IconSuccessRegistration","REG_FORM_POPUP_CONFIRM_REGISTRATION","Button","onClick","REG_FORM_POPUP_BUTTON","React","memo","RegisterPage","dispatch","useAppDispatch","useAppSelector","store","auth","signUpRequest","status","isError","errorInfo","isLoading","useState","openSuccessPopup","setOpenSuccessPopup","isRegFormVisible","setIsRegFormVisible","useForm","resolver","yupResolver","regFormSchema","mode","control","handleSubmit","setError","errors","formState","useEffect","processAuthServerError","onSubmit","data","a","setUnlogged","signUp","unwrap","email","undefined","Container","FormContainer","subtitle","description","REG_PAGE_DESCRIPTION","error","name","render","field","TextField","message","helperText","type","placeholder","REG_FORM_EMAIL_PLACEHOLDER","inputProps","disableUnderline","password","REG_FORM_PASS_PLACEHOLDER","password2","REG_FORM_PASS_CONFIRM_PLACEHOLDER","loading","size","Link","RouterLink","to","underline","description_color_red","textContainer","gap","children","noTextContainer","non_field_errors","authErrorChecker","REGISTER_WEAK_NUMBER_PASSWORD_ERROR","REGISTER_WEAK_PASSWORD_ERROR","REGISTER_SHORT_PASSWORD_ERROR","REG_FORM_MINMAX_SYMBOLS_ERROR","REGISTER_PRIVATE_INFO_ERROR","REGISTER_UNIQUE_MAIL","REGISTER_UNIQUE_MAIL_FORM_TEXT","REGISTER_INVALID_MAIL","REG_FORM_BAD_EMAIL_ERROR","AUTH_ACCOUNT_NOT_FOUND_ERROR","LOGIN_ENTER_ERROR","NOT_EQUAL_PASSWORD_ERROR","REG_FORM_CONFIRM_PASS_ERROR","FORGOT_PASSWORD_ERROR","FORGOT_PASSWORD_ERROR_FORM_TEXT","PASSWORD_LIKE_EMAIL_ERROR","PASSWORD_LIKE_EMAIL_ERROR_FORM_TEXT","serverErrors","Object","keys","forEach","Array","isArray","toString"],"mappings":"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","file":"static/js/40.ecb24129.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '100%',\n    boxSizing: 'border-box',\n    padding: '0',\n  },\n  fieldset: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '100%',\n    boxSizing: 'border-box',\n    padding: '0',\n  },\n  input: {\n    width: '100%',\n    marginBottom: '12px',\n    marginTop: '-10px',\n  },\n  firstInput: {\n    marginTop: 0,\n  },\n  title: {\n    width: '100%',\n    marginBottom: '24px',\n    textAlign: 'left',\n    color: '#488EFB',\n  },\n  button: {\n    padding: '0',\n    textTransform: 'none',\n    fontSize: '16px',\n    lineHeight: '20px',\n    marginTop: '-4px',\n  },\n  link: {\n    color: '#488EFB',\n  },\n  registerTitle: {\n    color: '#B5B5B7',\n    marginTop: '20px',\n    marginBottom: '120px',\n  },\n  registerLink: {\n    color: '#ffffff',\n  },\n}))\n\nexport default useStyles\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: theme.palette.background.default,\n    width: '386px',\n    maxWidth: 386,\n    borderRadius: '12px',\n    boxSizing: 'border-box',\n  },\n  container: {\n    display: 'flex',\n    position: 'relative',\n  },\n  dialogContent: {\n    padding: '32px 40px',\n    boxSizing: 'border-box',\n    '&:first-child': {\n      paddingTop: '32px',\n    },\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  popupHeader: {\n    margin: '0 0 32px 0',\n    fontWeight: 'normal',\n  },\n  popupDescription: {\n    margin: '32px 0 24px 0',\n    fontFamily: 'YS Text',\n    fontWeight: 500,\n  },\n  popupButton: {\n    textTransform: 'none',\n    fontSize: 16,\n    lineHeight: '20px',\n    fontFamily: 'YS Text',\n    borderRadius: '6px',\n  },\n}))\n\nexport default useStyles\n","import React, { FC } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport { Button, Typography } from '@material-ui/core'\nimport { useNavigate } from 'react-router-dom'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport useStyles from './SuccesRegistrationPopup.styles'\nimport { PROJECT_NAME, REG_FORM_POPUP_BUTTON, REG_FORM_POPUP_CONFIRM_REGISTRATION } from '../../../../utils/constants'\nimport IconSuccessRegistration from '../../../../assets/Icons/IconSuccessRegistration/IconSuccessRegistration'\n\ninterface ISuccesRegistrationPopupProps {\n  open: boolean\n  handleClose: () => void\n}\nconst SuccesRegistrationPopup: FC<ISuccesRegistrationPopupProps> = ({ open, handleClose }) => {\n  const classes = useStyles()\n  const navigate = useNavigate()\n\n  const handleClick = () => {\n    navigate('/sign-in')\n  }\n  return (\n    <div>\n      <Dialog\n        maxWidth=\"xl\"\n        classes={{ paper: classes.root }}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <div className={classes.container}>\n          <DialogContent className={classes.dialogContent}>\n            <Typography className={classes.popupHeader} component=\"h2\" variant=\"h2\">\n              {PROJECT_NAME}\n            </Typography>\n            <IconSuccessRegistration />\n            <Typography className={classes.popupDescription} component=\"p\" variant=\"body1\">\n              {REG_FORM_POPUP_CONFIRM_REGISTRATION}\n            </Typography>\n            <Button className={classes.popupButton} onClick={handleClick}>\n              {REG_FORM_POPUP_BUTTON}\n            </Button>\n          </DialogContent>\n        </div>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default React.memo(SuccesRegistrationPopup)\n","import React, { FC, useEffect } from 'react'\nimport { Button, TextField, Link, Typography, Container } from '@material-ui/core'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { MoonLoader } from 'react-spinners'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport { useForm, Controller, SubmitHandler } from 'react-hook-form'\nimport useStyles from './RegisterPage.style'\nimport FormContainer from '../../../components/Sub/FormContainer/FormContainer'\nimport { regFormSchema } from '../../../utils/schemas'\nimport {\n  PROJECT_NAME,\n  REG_PAGE_DESCRIPTION,\n  REG_FORM_EMAIL_PLACEHOLDER,\n  REG_FORM_PASS_PLACEHOLDER,\n  REG_FORM_PASS_CONFIRM_PLACEHOLDER,\n} from '../../../utils/constants'\nimport SuccesRegistrationPopup from '../../../components/Main/RegisterPage/SuccesRegistrationPopup/SuccesRegistrationPopup'\nimport { useAppDispatch, useAppSelector } from '../../../services/store/hooks'\nimport { signUp } from '../../../services/axios/auth'\nimport { setUnlogged } from '../../../services/slices/auth-slice'\nimport processAuthServerError from '../../../utils/auth-server-error'\nimport { TSignUpData } from '../../../services/types/auth/auth-types'\n\nconst RegisterPage: FC = () => {\n  const dispatch = useAppDispatch()\n  const {\n    signUpRequest: { status, isError, errorInfo },\n  } = useAppSelector((store) => store.auth)\n  const isLoading = status === 'pending'\n  const [openSuccessPopup, setOpenSuccessPopup] = React.useState(false)\n  const [isRegFormVisible, setIsRegFormVisible] = React.useState(true)\n\n  const openSuccessPopupHandler = () => {\n    setIsRegFormVisible(false)\n    setOpenSuccessPopup(true)\n  }\n\n  const handleCloseSuccessPopup = () => {\n    setIsRegFormVisible(true)\n    setOpenSuccessPopup(false)\n  }\n\n  const {\n    control,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm<TSignUpData>({\n    resolver: yupResolver(regFormSchema),\n    mode: 'onChange',\n  })\n\n  useEffect(() => {\n    if (isError) processAuthServerError(errorInfo, setError)\n  }, [isError])\n\n  const onSubmit: SubmitHandler<TSignUpData> = async (data) => {\n    dispatch(setUnlogged())\n    try {\n      const result = await dispatch(signUp(data)).unwrap()\n      if (result.email === data.email) openSuccessPopupHandler()\n    } catch {\n      return undefined\n    }\n    return undefined\n  }\n\n  const classes = useStyles()\n\n  return (\n    <Container className={classes.root}>\n      <SuccesRegistrationPopup open={openSuccessPopup} handleClose={handleCloseSuccessPopup} />\n      {isRegFormVisible && (\n        <FormContainer title={PROJECT_NAME} subtitle=\"\" description={REG_PAGE_DESCRIPTION} error={errors}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <fieldset className={classes.fieldset}>\n              <Controller\n                name=\"email\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    {...field}\n                    error={!!errors.email?.message}\n                    helperText={errors.email?.message || ' '}\n                    type=\"email\"\n                    className={`${classes.input} ${classes.firstInput}`}\n                    variant=\"outlined\"\n                    placeholder={REG_FORM_EMAIL_PLACEHOLDER}\n                    inputProps={{ disableUnderline: true }}\n                  />\n                )}\n              />\n\n              <Controller\n                name=\"password\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    {...field}\n                    error={!!errors.password?.message}\n                    helperText={errors.password?.message || ' '}\n                    type=\"password\"\n                    className={classes.input}\n                    variant=\"outlined\"\n                    placeholder={REG_FORM_PASS_PLACEHOLDER}\n                    inputProps={{ disableUnderline: true }}\n                  />\n                )}\n              />\n              <Controller\n                name=\"password2\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    {...field}\n                    error={!!errors.password2?.message}\n                    helperText={errors.password2?.message || ' '}\n                    type=\"password\"\n                    className={classes.input}\n                    variant=\"outlined\"\n                    placeholder={REG_FORM_PASS_CONFIRM_PLACEHOLDER}\n                    inputProps={{ disableUnderline: true }}\n                  />\n                )}\n              />\n              {isLoading ? (\n                <MoonLoader color=\"#1d6bf3\" loading size={39} />\n              ) : (\n                <Button className={classes.button} type=\"submit\">\n                  Зарегистрироваться\n                </Button>\n              )}\n            </fieldset>\n          </form>\n        </FormContainer>\n      )}\n      <Typography className={classes.registerTitle} variant=\"body1\">\n        Уже есть аккаунт?{' '}\n        <Link className={classes.registerLink} component={RouterLink} to=\"/sign-in\" underline=\"none\">\n          Войти\n        </Link>\n      </Typography>\n    </Container>\n  )\n}\n\nexport default React.memo(RegisterPage)\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: theme.palette.background.default,\n    borderRadius: '12px',\n    maxWidth: 386,\n    width: '100%',\n    padding: '32px 40px 32px 40px',\n  },\n  title: {\n    fontWeight: 'bold',\n    marginBottom: '24px',\n    textAlign: 'center',\n  },\n  subtitle: {\n    textAlign: 'center',\n  },\n  description: {\n    textAlign: 'center',\n  },\n  description_color_red: {\n    color: '#FF0200',\n  },\n  textContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '4px',\n    alignItems: 'center',\n    marginBottom: '24px',\n  },\n}))\n\nexport default useStyles\n","/* eslint-disable camelcase */\nimport React, { FC, ReactNode } from 'react'\nimport { Typography } from '@material-ui/core'\nimport { FieldError } from 'react-hook-form'\nimport useStyles from './FormContainer.styles'\n\ninterface IFormContainerProps {\n  title: string\n  subtitle?: string\n  description: string\n  error: { [fieldName: string]: FieldError }\n  noTextContainer?: boolean\n  children: ReactNode\n}\n\nconst FormContainer: FC<IFormContainerProps> = ({ children, title, subtitle, description, error, noTextContainer }) => {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <Typography className={classes.title} color=\"textPrimary\" variant=\"h2\" component=\"h1\">\n        {title}\n      </Typography>\n      {!noTextContainer && (\n        <div className={classes.textContainer}>\n          <Typography className={classes.subtitle} variant=\"body1\">\n            {subtitle}\n          </Typography>\n          {description && (\n            <Typography\n              className={\n                error?.non_field_errors\n                  ? `${classes.description} ${classes.description_color_red}`\n                  : classes.description\n              }\n              color=\"textSecondary\"\n              variant=\"body1\"\n            >\n              {/* eslint-disable-next-line no-nested-ternary */}\n              {error?.non_field_errors ? error?.non_field_errors?.message : description}\n            </Typography>\n          )}\n        </div>\n      )}\n      {children}\n    </div>\n  )\n}\n\nexport default React.memo(FormContainer)\n","import {\n  AUTH_ACCOUNT_NOT_FOUND_ERROR,\n  FORGOT_PASSWORD_ERROR,\n  FORGOT_PASSWORD_ERROR_FORM_TEXT,\n  LOGIN_ENTER_ERROR,\n  NOT_EQUAL_PASSWORD_ERROR,\n  PASSWORD_LIKE_EMAIL_ERROR,\n  PASSWORD_LIKE_EMAIL_ERROR_FORM_TEXT,\n  REG_FORM_BAD_EMAIL_ERROR,\n  REG_FORM_CONFIRM_PASS_ERROR,\n  REG_FORM_MINMAX_SYMBOLS_ERROR,\n  REGISTER_INVALID_MAIL,\n  REGISTER_PRIVATE_INFO_ERROR,\n  REGISTER_SHORT_PASSWORD_ERROR,\n  REGISTER_UNIQUE_MAIL,\n  REGISTER_UNIQUE_MAIL_FORM_TEXT,\n  REGISTER_WEAK_NUMBER_PASSWORD_ERROR,\n  REGISTER_WEAK_PASSWORD_ERROR,\n} from './constants'\n\nconst authErrorChecker = (error, field, setError) => {\n  switch (error) {\n    case REGISTER_WEAK_NUMBER_PASSWORD_ERROR: {\n      setError(field, {\n        type: 'server',\n        message: REGISTER_WEAK_NUMBER_PASSWORD_ERROR,\n      })\n      break\n    }\n    case REGISTER_WEAK_PASSWORD_ERROR: {\n      setError(field, {\n        type: 'server',\n        message: REGISTER_WEAK_PASSWORD_ERROR,\n      })\n      break\n    }\n    case REGISTER_SHORT_PASSWORD_ERROR: {\n      setError(field, {\n        type: 'server',\n        message: REG_FORM_MINMAX_SYMBOLS_ERROR,\n      })\n      break\n    }\n    case REGISTER_PRIVATE_INFO_ERROR: {\n      setError(field, {\n        type: 'server',\n        message: REGISTER_PRIVATE_INFO_ERROR,\n      })\n      break\n    }\n    case REGISTER_UNIQUE_MAIL: {\n      setError(field, {\n        type: 'server',\n        message: REGISTER_UNIQUE_MAIL_FORM_TEXT,\n      })\n      break\n    }\n    case REGISTER_INVALID_MAIL: {\n      setError(field, {\n        type: 'server',\n        message: REG_FORM_BAD_EMAIL_ERROR,\n      })\n      break\n    }\n    case AUTH_ACCOUNT_NOT_FOUND_ERROR: {\n      setError('non_field_errors', {\n        type: 'server',\n        message: LOGIN_ENTER_ERROR,\n      })\n      break\n    }\n    case NOT_EQUAL_PASSWORD_ERROR: {\n      setError('non_field_errors', {\n        type: 'server',\n        message: REG_FORM_CONFIRM_PASS_ERROR,\n      })\n      break\n    }\n    case FORGOT_PASSWORD_ERROR: {\n      setError(field, {\n        type: 'server',\n        message: FORGOT_PASSWORD_ERROR_FORM_TEXT,\n      })\n      break\n    }\n    case PASSWORD_LIKE_EMAIL_ERROR: {\n      setError(field, {\n        type: 'server',\n        message: PASSWORD_LIKE_EMAIL_ERROR_FORM_TEXT,\n      })\n      break\n    }\n    default: {\n      setError('non_field_errors', {\n        type: 'server',\n        message: 'Серверная ошибка',\n      })\n    }\n  }\n}\n\nconst processAuthServerError = (serverErrors, setError) => {\n  if (typeof serverErrors !== 'object') {\n    setError('non_field_errors', {\n      type: 'server',\n      message: 'Серверная ошибка',\n    })\n  } else {\n    Object.keys(serverErrors).forEach((field) => {\n      // Ошибки могут возвращаться массивом, учитываем это\n      if (Array.isArray(serverErrors[field])) {\n        // Достаточно вывести первую ошибку\n        authErrorChecker(serverErrors[field][0].toString(), field, setError)\n      } else {\n        authErrorChecker(serverErrors[field].toString(), field, setError)\n      }\n    })\n  }\n}\n\nexport default processAuthServerError\n"],"sourceRoot":""}