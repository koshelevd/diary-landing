{"version":3,"sources":["components/RequireAuth/RequireUserAuth/RequireUserAuth.tsx","utils/check-auth.ts"],"names":["RequireUserAuth","children","redirectTo","useAppSelector","store","auth","isLoggedIn","role","profile","onboarding","personalInfo","experienceInfo","resumeInfo","location","useLocation","isOnboardingPage","pathname","includes","isConsultant","to","state","from","isVacancyManager","CONSULTANT_ROLES","VACANCY_MANAGER_ROLES","isUser","USER_ROLES"],"mappings":"0HAAA,gDA0BeA,UAnBgC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAwC,IAA9BC,kBAA8B,MAAjB,WAAiB,EACxF,EAAsCC,aAAe,SAACC,GAAD,OAAuBA,EAAMC,QAA1EC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,QAC1B,EAAqDL,aAAe,SAACC,GAAD,OAAWA,EAAMK,cAA7EC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,eAAgBC,EAAtC,EAAsCA,WAChCC,EAAWC,cACXC,EAAmBF,EAASG,SAASC,SAAS,gBAEpD,OAAKX,EACDY,YAAaX,GAAc,cAAC,IAAD,CAAUY,GAAI,CAAEH,SAAU,eAAiBI,MAAO,CAAEC,KAAMR,KACrFS,YAAiBf,GAAc,cAAC,IAAD,CAAUY,GAAI,CAAEH,SAAU,cAAgBI,MAAO,CAAEC,KAAMR,KACvFL,GAAYO,GAIbP,IAAWO,GAAqBL,GAAiBC,GAAmBC,EAGjEX,EAFE,cAAC,IAAD,CAAUkB,GAAI,CAAEH,SAAU,KAAOI,MAAO,CAAEC,KAAMR,KAJhD,cAAC,IAAD,CAAUM,GAAI,CAAEH,SAAU,6BAA+BI,MAAO,CAAEC,KAAMR,KAJzD,cAAC,IAAD,CAAUM,GAAI,CAAEH,SAAUd,GAAckB,MAAO,CAAEC,KAAMR,O,iCCZjF,iHAEaK,EAAe,SAACX,GAAD,OAAqBA,GAAQgB,KAAiBN,SAASV,IACtEe,EAAmB,SAACf,GAAD,OAAqBA,GAAQiB,KAAsBP,SAASV,IAC/EkB,EAAS,SAAClB,GAAD,OAAqBA,GAAQmB,KAAWT,SAASV","file":"static/js/42.24709ae2.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react'\nimport { Navigate, useLocation } from 'react-router-dom'\nimport { isConsultant, isVacancyManager } from '../../../utils/check-auth'\nimport { IRequireAuthProps } from '../../../services/types/auth/auth-types'\nimport { useAppSelector } from '../../../services/store/hooks'\nimport { TRootState } from '../../../services/store/store'\n\nconst RequireUserAuth: FC<IRequireAuthProps> = ({ children, redirectTo = '/sign-in' }) => {\n  const { isLoggedIn, role, profile } = useAppSelector((store: TRootState) => store.auth)\n  const { personalInfo, experienceInfo, resumeInfo } = useAppSelector((store) => store.onboarding)\n  const location = useLocation()\n  const isOnboardingPage = location.pathname.includes('/onboarding/')\n\n  if (!isLoggedIn) return <Navigate to={{ pathname: redirectTo }} state={{ from: location }} />\n  if (isConsultant(role)) return <Navigate to={{ pathname: '/consultant' }} state={{ from: location }} />\n  if (isVacancyManager(role)) return <Navigate to={{ pathname: '/vacancies' }} state={{ from: location }} />\n  if (!profile && !isOnboardingPage)\n    return <Navigate to={{ pathname: '/onboarding/personal-info' }} state={{ from: location }} />\n  // Добавил дополнительные поля в проверке, чтобы при успешном создания профиле в онбординге\n  // Успевали очищаться поля онбординга\n  if (profile && isOnboardingPage && !personalInfo && !experienceInfo && !resumeInfo)\n    return <Navigate to={{ pathname: '/' }} state={{ from: location }} />\n\n  return children as ReactElement\n}\n\nexport default RequireUserAuth\n","import { TUserRole } from '../services/types/auth/auth-types'\nimport { CONSULTANT_ROLES, VACANCY_MANAGER_ROLES, USER_ROLES } from './constants'\n\nexport const isConsultant = (role: TUserRole) => role && CONSULTANT_ROLES.includes(role)\nexport const isVacancyManager = (role: TUserRole) => role && VACANCY_MANAGER_ROLES.includes(role)\nexport const isUser = (role: TUserRole) => role && USER_ROLES.includes(role)\n"],"sourceRoot":""}