{"version":3,"sources":["components/RequireAuth/RequireUserAuth/RequireUserAuth.tsx","utils/check-auth.ts"],"names":["RequireUserAuth","children","redirectTo","useAppSelector","store","auth","isLoggedIn","role","profile","personalInfo","JSON","parse","localStorage","getItem","experienceInfo","resumeInfo","location","useLocation","isOnboardingPage","pathname","includes","isConsultant","to","state","from","isVacancyManager","CONSULTANT_ROLES","VACANCY_MANAGER_ROLES","isUser","USER_ROLES","isWorkshopManager","WORKSHOP_MANAGER_ROLES"],"mappings":"0HAAA,gDA4BeA,UArBgC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAwC,IAA9BC,kBAA8B,MAAjB,WAAiB,EACxF,EAAsCC,aAAe,SAACC,GAAD,OAAuBA,EAAMC,QAA1EC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,QACpBC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,iBAC/CC,EAAiBJ,KAAKC,MAAMC,aAAaC,QAAQ,mBACjDE,EAAaL,KAAKC,MAAMC,aAAaC,QAAQ,eAC7CG,EAAWC,cACXC,EAAmBF,EAASG,SAASC,SAAS,gBAEpD,OAAKd,EACDe,YAAad,GAAc,cAAC,IAAD,CAAUe,GAAI,CAAEH,SAAU,eAAiBI,MAAO,CAAEC,KAAMR,KACrFS,YAAiBlB,GAAc,cAAC,IAAD,CAAUe,GAAI,CAAEH,SAAU,cAAgBI,MAAO,CAAEC,KAAMR,KACvFR,GAAYU,GAIbV,IAAWU,GAAqBT,GAAiBK,GAAmBC,EAGjEd,EAFE,cAAC,IAAD,CAAUqB,GAAI,CAAEH,SAAU,UAAYI,MAAO,CAAEC,KAAMR,KAJrD,cAAC,IAAD,CAAUM,GAAI,CAAEH,SAAU,6BAA+BI,MAAO,CAAEC,KAAMR,KAJzD,cAAC,IAAD,CAAUM,GAAI,CAAEH,SAAUjB,GAAcqB,MAAO,CAAEC,KAAMR,O,iCCdjF,mJAEaK,EAAe,SAACd,GAAD,OAAqBA,GAAQmB,KAAiBN,SAASb,IACtEkB,EAAmB,SAAClB,GAAD,OAAqBA,GAAQoB,KAAsBP,SAASb,IAC/EqB,EAAS,SAACrB,GAAD,OAAqBA,GAAQsB,KAAWT,SAASb,IAC1DuB,EAAoB,SAACvB,GAAD,OAAqBA,GAAQwB,KAAuBX,SAASb","file":"static/js/57.b00760ea.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react'\nimport { Navigate, useLocation } from 'react-router-dom'\nimport { isConsultant, isVacancyManager } from '../../../utils/check-auth'\nimport { IRequireAuthProps } from '../../../services/types/auth/auth-types'\nimport { useAppSelector } from '../../../services/store/hooks'\nimport { TRootState } from '../../../services/store/store'\n\nconst RequireUserAuth: FC<IRequireAuthProps> = ({ children, redirectTo = '/sign-in' }) => {\n  const { isLoggedIn, role, profile } = useAppSelector((store: TRootState) => store.auth)\n  const personalInfo = JSON.parse(localStorage.getItem('personalInfo') as string)\n  const experienceInfo = JSON.parse(localStorage.getItem('experienceInfo') as string)\n  const resumeInfo = JSON.parse(localStorage.getItem('resumeInfo') as string)\n  const location = useLocation()\n  const isOnboardingPage = location.pathname.includes('/onboarding/')\n\n  if (!isLoggedIn) return <Navigate to={{ pathname: redirectTo }} state={{ from: location }} />\n  if (isConsultant(role)) return <Navigate to={{ pathname: '/consultant' }} state={{ from: location }} />\n  if (isVacancyManager(role)) return <Navigate to={{ pathname: '/vacancies' }} state={{ from: location }} />\n  if (!profile && !isOnboardingPage)\n    return <Navigate to={{ pathname: '/onboarding/personal-info' }} state={{ from: location }} />\n  // Добавил дополнительные поля в проверке, чтобы при успешном создания профиле в онбординге\n  // Успевали очищаться поля онбординга\n  if (profile && isOnboardingPage && !personalInfo && !experienceInfo && !resumeInfo)\n    return <Navigate to={{ pathname: '/diary' }} state={{ from: location }} />\n\n  return children as ReactElement\n}\n\nexport default RequireUserAuth\n","import { TUserRole } from '../services/types/auth/auth-types'\nimport { CONSULTANT_ROLES, VACANCY_MANAGER_ROLES, USER_ROLES, WORKSHOP_MANAGER_ROLES } from './constants'\n\nexport const isConsultant = (role: TUserRole) => role && CONSULTANT_ROLES.includes(role)\nexport const isVacancyManager = (role: TUserRole) => role && VACANCY_MANAGER_ROLES.includes(role)\nexport const isUser = (role: TUserRole) => role && USER_ROLES.includes(role)\nexport const isWorkshopManager = (role: TUserRole) => role && WORKSHOP_MANAGER_ROLES.includes(role)\n"],"sourceRoot":""}